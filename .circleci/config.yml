# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

orbs:
  gcp-cli: circleci/gcp-cli@2.1.0

executors:
  # cypress requires xvfb to generate screenshots and recordings from browsers
  node:
    docker:
      - image: circleci/node:14.17.0-browsers
    working_directory: ~/studio-landing-page

commands:
  npm-install:
    steps:
      - run:
          name: Installs npm version from package.jsons engines field
          command: |
            ENGINES_NPM_VERSION=`node -e "console.log(require('./package.json').engines.npm)"`;
            sudo npm i -g npm@$ENGINES_NPM_VERSION;
            npm -v;

      - restore_cache:
          name: Restore npm cache
          keys:
            - npm-cache--{{ checksum "package-lock.json" }}--{{ checksum ".circleci/config.yml" }}
      - run:
          name: Install npm dependencies with `npm ci`
          command: npm ci --prefer-offline
      - save_cache:
          name: Save npm caches
          key: npm-cache--{{ checksum "package-lock.json" }}--{{ checksum ".circleci/config.yml" }}
          paths:
            - ~/.npm
jobs:
  eslint:
    executor: node
    steps:
      - checkout
      - npm-install
      - run:
          name: Ensure output directory exists
          command: mkdir -p /tmp/test-reports/eslint
      - restore_cache:
          name: Restore eslint cache
          keys:
            - raw-eslint-cache--{{ checksum ".eslintrc.js" }}--{{ .Branch }}--{{ checksum ".circleci/config.yml" }}
            - raw-eslint-cache--{{ checksum ".eslintrc.js" }}--main--{{ checksum ".circleci/config.yml" }}
      - run:
          name: Linter
          command: npm run lint -- --quiet --format junit --output-file /tmp/test-reports/eslint/results.xml
      - save_cache:
          name: Save eslint cache
          key: raw-eslint-cache--{{ checksum ".eslintrc.js" }}--{{ .Branch }}--{{ checksum ".circleci/config.yml" }}--{{ epoch }}
          paths:
            - .eslintcache
      - store_test_results:
          path: /tmp/test-reports

  typescript:
    executor: node
    steps:
      - checkout
      - npm-install
      - run:
          name: TypeScript
          command: npm run typescript:check

  build-storybook:
    executor: node
    resource_class: large
    steps:
      - checkout
      - npm-install
      - restore_cache:
          name: Restore storybook cache
          keys:
            - storybook-cache--{{ .Branch }}--{{ checksum ".circleci/config.yml" }}
            - storybook-cache--main--{{ checksum ".circleci/config.yml" }}
      - run:
          name: Build storybook
          command: npm run build-storybook -- --quiet
      - save_cache:
          name: Save storybook cache
          key: storybook-cache--{{ .Branch }}--{{ checksum ".circleci/config.yml" }}--{{ epoch }}
          paths:
            - node_modules/.cache/storybook
      - persist_to_workspace:
          root: ~/studio-landing-page
          paths:
            - .out

  build-latest-app:
    executor: node
    steps:
      - checkout
      - npm-install
      - run:
          name: Build
          command: '[ -d build ] || PUBLIC_URL=https://apollo-server-landing-page.cdn.apollographql.com/_latest npm run build -- --no-progress'
          environment:
            BUILD_TO_CDN: 'true'
      - persist_to_workspace:
          root: ~/studio-landing-page
          paths:
            - build
            - cdn-lookup-key

  build-versioned-app:
    executor: node
    steps:
      - checkout
      - npm-install
      - run:
          name: Build
          command: '[ -d build ] || PUBLIC_URL=https://apollo-server-landing-page.cdn.apollographql.com/$CIRCLE_SHA1 npm run build -- --no-progress'
          environment:
            BUILD_TO_CDN: 'true'
      - persist_to_workspace:
          root: ~/studio-landing-page
          paths:
            - build
            - cdn-lookup-key

  chromatic:
    executor: node
    steps:
      - checkout
      - npm-install
      - attach_workspace:
          at: ~/studio-landing-page
      - run:
          name: Chromatic
          # TODO: auto-accept anything that hits main (add  < --auto-accept-changes=main > to the command)
          # (mostly for squash & merge commits where a PR is approved)
          environment:
            NODE_ENV: 'production'
          command: npm run chromatic -- --storybook-build-dir=.out --exit-once-uploaded --exit-zero-on-changes

  cdn-upload-latest:
    executor: gcp-cli/google
    steps:
      - gcp-cli/initialize:
          gcloud-service-key: GCLOUD_GCS_SERVICE_KEY
      - gcp-cli/install
      - checkout
      - attach_workspace:
          at: ~/studio-landing-page
      - run:
          name: Upload build artifacts to CDN
          command: |
            gsutil -m rsync -r ~/studio-landing-page/build gs://apollo-server-landing-page/_latest

  cdn-upload-versioned:
    executor: gcp-cli/google
    steps:
      - gcp-cli/initialize:
          gcloud-service-key: GCLOUD_GCS_SERVICE_KEY
      - gcp-cli/install
      - checkout
      - attach_workspace:
          at: ~/studio-landing-page
      - run:
          name: Upload build artifacts to CDN
          command: |
            gsutil -m rsync -r ~/studio-landing-page/build gs://apollo-server-landing-page/$CIRCLE_SHA1

workflows:
  build-test-deploy:
    jobs:
      - eslint
      - typescript
      - build-storybook
      - build-latest-app
      - chromatic:
          requires:
            - build-storybook
            - eslint
            - typescript
      - cdn-upload-latest:
          requires:
            - build-latest-app
          filters:
            branches:
              only: main
      - build-versioned-app:
          requires:
            - cdn-upload-latest
      - cdn-upload-versioned:
          requires:
            - build-versioned-app
          filters:
            branches:
              only: main
      # For running simple node tests, you could optionally use the node/test job from the orb to replicate and replace the job above in fewer lines.
      # - node/test
